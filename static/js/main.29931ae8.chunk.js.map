{"version":3,"sources":["components/dungeon_list.js","components/sensitivity_input.js","components/enemy_info.js","hooks/game.js","components/player_info.js","utils.js","components/game.js","components/app.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","DUNGEON_1_INFO","enemies","name","hp","maxHP","damage","xp","DungeonList","openGameScreen","useContext","GameContext","dispatch","state","onClick","type","payload","SensitivityInput","sensitivity","step","value","onChange","event","target","EnemyBar","Health","percent","width","Math","floor","Text","EnemyInfo","enemy","currentEnemyIdx","initialState","status","player","level","getXPToLevel","lvl","reducer","action","newEnemies","slice","newHP","max","newEnemyIdx","newXP","reqXP","length","HealthContainer","XPContainer","XPBar","PlayerInfo","maxXP","random","min","ceil","useStableCB","callback","values","self","useRef","handler","args","current","Game","screenHandle","canvasRef","useState","canvas","setCanvas","ctx","setCtx","cursorRef","x","y","targetsRef","stateRef","useEffect","getContext","window","innerWidth","height","innerHeight","requestPointerLock","document","addEventListener","lockChangeAlert","handleClick","exitPointerLock","exit","t","d3","tickAnimation","stop","screenX","screenY","targets","newTargets","filter","drawCanvas","degrees","fillStyle","fillRect","forEach","drawTargets","beginPath","arc","PI","fill","closePath","_","spawnTarget","pointerLockElement","mozPointerLockElement","m","mouseMoveMemo","e","dx","movementX","dy","movementY","ref","React","createContext","App","useReducer","gameScreen","useFullScreenHandle","Provider","enter","handle","active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.29931ae8.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n`;\n\nconst DUNGEON_1_INFO = {\n  enemies: [\n    {\n      name: 'Slime',\n      hp: 100,\n      maxHP: 100,\n      damage: 10,\n      xp: 5,\n    },\n    {\n      name: 'Slime',\n      hp: 100,\n      maxHP: 100,\n      damage: 10,\n      xp: 5,\n    },\n    {\n      name: 'Slime',\n      hp: 100,\n      maxHP: 100,\n      damage: 10,\n      xp: 5,\n    },\n    {\n      name: 'Slime Boss',\n      hp: 1000,\n      maxHP: 1000,\n      damage: 20,\n      xp: 10,\n    },\n  ]\n};\n\nconst DungeonList = ({ openGameScreen }) => {\n  const { state, dispatch } = useContext(GameContext);\n\n  return (\n    <Container>\n      <button onClick={() => {\n        dispatch({\n          type: 'startGame',\n          payload: DUNGEON_1_INFO,\n        });\n        openGameScreen();\n      }}>Dungeon 1</button>\n    </Container>\n  );\n}\n\nexport default DungeonList;\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst SensitivityInput = () => {\n  const { state, dispatch } = useContext(GameContext);\n\n  return (\n    <div>\n      <br />\n      <span>Current Sensitivity: {state.sensitivity}</span>\n      <br />\n      <br />\n      <input \n        type=\"number\"\n        step=\"0.01\"\n        value={state.sensitivity} onChange={(event) =>\n          dispatch({ type: 'setSensitivity', payload: { sensitivity: event.target.value } })\n        }\n      />\n    </div>\n  );\n};\nexport default SensitivityInput;\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst EnemyBar = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst EnemyInfo = () => {\n  const { state } = useContext(GameContext);\n\n  const { enemies, currentEnemyIdx } = state;\n  const enemy = enemies[currentEnemyIdx];\n\n  return (\n    <Container>\n      <h1>{enemy.name}, Damage: {enemy.damage}, XP Gained on Kill: {enemy.xp}</h1>\n      <EnemyBar>\n        <Text>{enemy.hp} / {enemy.maxHP}</Text>\n        <Health percent={enemy.hp / enemy.maxHP} />\n      </EnemyBar>\n    </Container>\n  );\n};\nexport default EnemyInfo;","import { useReducer } from 'react';\n\nconst initialState = {\n  status: 'INITIAL',\n  player: {\n    hp: 100,\n    maxHP: 100,\n    damage: 10,\n    level: 1,\n    xp: 0,\n  },\n  sensitivity: 1,\n};\n\nexport const getXPToLevel = (lvl) => lvl * lvl * 10;\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'setSensitivity':\n      return {\n        ...state,\n        sensitivity: action.payload.sensitivity,\n      }\n    case 'startGame':\n      return {\n        ...state,\n        status: 'RUNNING',\n        enemies: action.payload.enemies,\n        currentEnemyIdx: 0,\n      }\n    case 'nextEnemy':\n      return {\n        ...state,\n        currentEnemyIdx: state.currentEnemyIdx + 1,\n      }\n    case 'damageEnemy': {\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      const newEnemies = enemies.slice();\n      const newHP = Math.max(enemy.hp - 10, 0);\n      newEnemies[currentEnemyIdx] = {\n        ...enemy,\n        hp: newHP,\n      };\n\n      const newEnemyIdx = newHP ? currentEnemyIdx : currentEnemyIdx + 1;\n      let player = state.player;\n      if (!newHP) {\n        // Gain XP\n        let newXP = state.player.xp + enemy.xp;\n        let level = state.player.level;\n        const reqXP = getXPToLevel(level);\n        // Level if XP maxed\n        if (newXP >= reqXP) {\n          newXP = reqXP - newXP;\n          level++;\n        }\n        player = {\n          ...state.player,\n          xp: newXP,\n          level,\n        };\n      }\n      if (newEnemyIdx >= enemies.length) {\n        return {\n          status: 'COMPLETED',\n        }\n      }\n      return {\n        ...state,\n        player,\n        enemies: newEnemies,\n        currentEnemyIdx: newEnemyIdx,\n      }\n    }\n    case 'takeDamage': {\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      const newHP = Math.max(state.player.hp - enemy.damage, 0);\n      if (!newHP) {\n        return {\n          status: 'GAME_OVER',\n        };\n      }\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          hp: newHP,\n        },\n      }\n    }\n    case 'endGame':\n      return {\n        ...state,\n        status: 'INITIAL',\n      }\n    default:\n      return state\n  }\n}\n\nexport const useGameReducer = () => useReducer(reducer, initialState);","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\nimport { getXPToLevel } from '../hooks/game';\n\nconst Container = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 150px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst HealthContainer = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst XPContainer = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 30px;\n  text-align: center;\n  line-height: 30px;\n  border: 1px solid #666;\n`;\n\nconst XPBar = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: yellow;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst XPText = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\n\nconst PlayerInfo = () => {\n  // const { playerState: player } = useContext(PlayerContext);\n  const { state } = useContext(GameContext);\n  const { player } = state;\n  const maxXP = getXPToLevel(player.level);\n\n  return (\n    <Container>\n      <h1>Player, Level: {player.level}, Damage: {player.damage}</h1>\n      <HealthContainer>\n        <Text>{player.hp} / {player.maxHP}</Text>\n        <Health percent={player.hp / player.maxHP} />\n      </HealthContainer>\n      <XPContainer>\n        <Text>{player.xp} / {maxXP}</Text>\n        <XPBar percent={player.xp / maxXP} />\n      </XPContainer>\n    </Container>\n  );\n};\n\nexport default PlayerInfo;","import React, { useRef } from 'react';\n\nexport const random = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport const degToRad = (degrees) => Math.PI / 180 * degrees;\n\nexport const useStableCB = (callback, values) => {\n  const self = useRef({\n    values: values,\n    handler: (...args) => {\n      return callback(...args, self.current.values)\n    }\n  });\n  self.current.values = values\n  return self.current.handler\n}","import React, { useEffect, useContext, useState, useRef, useCallback } from 'react';\nimport * as d3 from 'd3-timer';\n\nimport { GameContext } from './app';\nimport EnemyInfo from './enemy_info';\nimport PlayerInfo from './player_info';\nimport { degToRad, random, useStableCB } from '../utils';\n\n\nconst RADIUS = 5;\n\nconst Game = ({ screenHandle }) => {\n  const { state, dispatch } = useContext(GameContext);\n  const canvasRef = useRef(null);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  const cursorRef = useRef({ x: 100, y: 100 });\n  const targetsRef = useRef([]);\n  const stateRef = useRef(state);\n\n  useEffect(() => {\n    stateRef.current = state; \n  }, [state])\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setCanvas(canvas);\n    const ctx = canvasRef.current.getContext('2d');\n    setCtx(ctx);\n    const { innerWidth: width, innerHeight: height } = window;\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    canvas.requestPointerLock();\n    document.addEventListener('pointerlockchange', () => lockChangeAlert(canvas), false);\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.exitPointerLock();\n      screenHandle.exit();\n    };\n  }, [])\n\n  useEffect(() => {\n    let t;\n    if (canvas && ctx) {\n      t = d3.timer(tickAnimation)\n    }\n    return () => t && t.stop()\n  }, [canvas, ctx]);\n\n  const handleClick = () => {\n    const screenX = cursorRef.current.x;\n    const screenY = cursorRef.current.y;\n    const targets = targetsRef.current;\n    const newTargets = targets.filter(({ x, y, width, height }) =>\n      // Filter out if target clicked inside\n      !(screenX + RADIUS >= x && screenX - RADIUS <= x + width && screenY + RADIUS >= y && screenY - RADIUS <= y + height));\n    const { enemies, currentEnemyIdx } = stateRef.current;\n    const enemy = enemies[currentEnemyIdx];\n    if (newTargets.length === targets.length) {\n      // Player misses target\n      dispatch({ type: 'takeDamage' });\n    } else {\n      // Player hits target\n      targetsRef.current = newTargets;\n      dispatch({\n        type: 'damageEnemy',\n        payload: {\n          damage: state.player.damage,\n        }\n      });\n    }\n  }\n\n  const spawnTarget = (canvas) => {\n    if (!targetsRef.current.length && canvas) {\n      const WIDTH = 50;\n      const HEIGHT = 50;\n\n      const { width, height } = canvas;\n      const x = random(width / 2 - width / 4, width - WIDTH - width / 2);\n      const y = random(height / 2 - height / 4, height - HEIGHT - height / 2);\n      targetsRef.current = [{ x, y, width: WIDTH, height: HEIGHT }];\n    }\n  }\n\n  const drawTargets = (ctx) => {\n    targetsRef.current.forEach(({ x, y, width, height }) => {\n      ctx.fillStyle = \"yellow\";\n      ctx.fillRect(x, y, width, height);\n    });\n  };\n\n  const drawCanvas = (canvas, ctx) => {\n    ctx.fillStyle = 'grey';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawTargets(ctx);\n\n    // Cursor\n    ctx.fillStyle = \"#f00\";\n    ctx.beginPath();\n    ctx.arc(cursorRef.current.x, cursorRef.current.y, RADIUS, 0, degToRad(360), true);\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const tickAnimation = useStableCB((_, [canvas, ctx]) => {\n    if (!canvas || !ctx) return;\n\n    spawnTarget(canvas);\n    drawCanvas(canvas, ctx);\n  }, [canvas, ctx]);\n\n  const lockChangeAlert = (canvas) => {\n    if (document.pointerLockElement === canvas ||\n        document.mozPointerLockElement === canvas) {\n      canvas.addEventListener(\"mousemove\", m => mouseMoveMemo(m), false);\n    }\n  }\n\n  const mouseMoveMemo = useStableCB((e, [cursorRef, canvas]) => {\n    if (!canvas) return;\n    // Edge detection\n    const { x, y } = cursorRef.current;\n    if (x > canvas.width) {\n      cursorRef.current = { x: canvas.width - 1, y }\n      return\n    }\n    if (y > canvas.height) {\n      cursorRef.current = { x, y: canvas.height - 1 }\n      return\n    }  \n    if (x < 0) {\n      cursorRef.current = { x: 1, y }\n      return\n    }\n    if (y < 0) {\n      cursorRef.current = { x, y: 1 }\n      return\n    }\n    const dx = e.movementX * (state.sensitivity || 1);\n    const dy = e.movementY * (state.sensitivity || 1);\n    cursorRef.current = { x: x + dx, y: y + dy }\n  }, [cursorRef, canvas]);\n\n  return (\n    <>\n      <canvas ref={canvasRef}>\n      </canvas>\n      <EnemyInfo />\n      <PlayerInfo />\n    </>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\nimport styled from '@emotion/styled';\nimport DungeonList from './dungeon_list';\nimport SensitivityInput from './sensitivity_input';\nimport Game from './game';\n\nimport { useGameReducer } from '../hooks/game';\n\nconst Container = styled.div`\n`;\n\nexport const GameContext = React.createContext();\n\nconst App = () => {\n  const [state, dispatch] = useGameReducer();\n  const gameScreen = useFullScreenHandle();\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Container>\n        {state.status === 'INITIAL' &&\n          <>\n            <DungeonList openGameScreen={gameScreen.enter} />\n            <SensitivityInput />\n          </>\n        }\n        <FullScreen handle={gameScreen}>\n          {state.status === 'RUNNING' && gameScreen.active && <Game screenHandle={gameScreen}/>}\n        </FullScreen>\n        {state.status === 'COMPLETED' && <>You're a beast lol</>}\n        {state.status === 'GAME_OVER' && <>You suck lol</>}\n      </Container>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}