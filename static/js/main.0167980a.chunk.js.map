{"version":3,"sources":["components/dungeon_list.js","components/enemy_info.js","hooks/player.js","components/player_info.js","utils.js","components/game.js","hooks/game.js","components/app.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","DUNGEON_1_INFO","enemies","name","hp","maxHP","damage","xp","DungeonList","openGameScreen","useContext","GameContext","dispatch","state","onClick","type","payload","EnemyBar","Health","percent","width","Math","floor","Text","EnemyInfo","enemy","currentEnemyIdx","initialState","level","reducer","action","amount","HealthContainer","XPContainer","XPBar","PlayerInfo","lvl","player","maxXP","random","min","max","ceil","useStableCB","callback","values","self","useRef","handler","args","current","Game","screenHandle","PlayerContext","playerState","canvasRef","playerDispatch","useState","canvas","setCanvas","ctx","setCtx","cursorRef","x","y","targetsRef","stateRef","useEffect","getContext","window","innerWidth","height","innerHeight","requestPointerLock","document","addEventListener","lockChangeAlert","handleClick","exitPointerLock","exit","t","d3","tickAnimation","stop","screenX","screenY","targets","newTargets","filter","length","drawCanvas","degrees","fillStyle","fillRect","forEach","drawTargets","beginPath","arc","PI","fill","closePath","_","spawnTarget","pointerLockElement","mozPointerLockElement","m","mouseMoveMemo","e","dx","movementX","dy","movementY","ref","status","newEnemies","slice","newHP","newEnemyIdx","newXP","reqXP","React","createContext","App","useReducer","gameScreen","useFullScreenHandle","Provider","value","enter","handle","active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0167980a.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n`;\n\nconst DUNGEON_1_INFO = {\n  enemies: [\n    {\n      name: 'Slime',\n      hp: 100,\n      maxHP: 100,\n      damage: 10,\n      xp: 5,\n    },\n    {\n      name: 'Slime',\n      hp: 100,\n      maxHP: 100,\n      damage: 10,\n      xp: 5,\n    },\n    {\n      name: 'Slime',\n      hp: 100,\n      maxHP: 100,\n      damage: 10,\n      xp: 5,\n    },\n    {\n      name: 'Slime Boss',\n      hp: 1000,\n      maxHP: 1000,\n      damage: 100,\n      xp: 10,\n    },\n  ]\n};\n\nconst DungeonList = ({ openGameScreen }) => {\n  const { state, dispatch } = useContext(GameContext);\n\n  return (\n    <Container>\n      <button onClick={() => {\n        dispatch({\n          type: 'startGame',\n          payload: DUNGEON_1_INFO,\n        });\n        openGameScreen();\n      }}>Dungeon 1</button>\n    </Container>\n  );\n}\n\nexport default DungeonList;\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst EnemyBar = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst EnemyInfo = () => {\n  const { state } = useContext(GameContext);\n\n  const { enemies, currentEnemyIdx } = state;\n  const enemy = enemies[currentEnemyIdx];\n\n  return (\n    <Container>\n      <h1>{enemy.name}, Damage: {enemy.damage}, XP Gained on Kill: {enemy.xp}</h1>\n      <EnemyBar>\n        <Text>{enemy.hp} / {enemy.maxHP}</Text>\n        <Health percent={enemy.hp / enemy.maxHP} />\n      </EnemyBar>\n    </Container>\n  );\n};\nexport default EnemyInfo;","import { useReducer } from 'react';\n\nexport const getXPToLevel = (lvl) => lvl * lvl * 10;\n\nconst initialState = {\n  hp: 100,\n  maxHP: 100,\n  damage: 10,\n  level: 1,\n  xp: 0,\n};\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'takeDamage':\n      return {\n        ...state,\n        hp: state.hp - action.payload.damage,\n      }\n    case 'gainXP':\n      return {\n        ...state,\n        xp: state.xp + action.payload.amount,\n      }\n    default:\n      return state\n  }\n}\n\nexport const usePlayerReducer = () => useReducer(reducer, initialState);\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\nimport { getXPToLevel } from '../hooks/player';\n\nconst Container = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 150px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst HealthContainer = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst XPContainer = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 30px;\n  text-align: center;\n  line-height: 30px;\n  border: 1px solid #666;\n`;\n\nconst XPBar = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: yellow;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst XPText = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\n\nconst PlayerInfo = () => {\n  // const { playerState: player } = useContext(PlayerContext);\n  const { state } = useContext(GameContext);\n  const { player } = state;\n  const maxXP = getXPToLevel(player.level);\n\n  return (\n    <Container>\n      <h1>Player, Level: {player.level}, Damage: {player.damage}</h1>\n      <HealthContainer>\n        <Text>{player.hp} / {player.maxHP}</Text>\n        <Health percent={player.hp / player.maxHP} />\n      </HealthContainer>\n      <XPContainer>\n        <Text>{player.xp} / {maxXP}</Text>\n        <XPBar percent={player.xp / maxXP} />\n      </XPContainer>\n    </Container>\n  );\n};\n\nexport default PlayerInfo;","import React, { useRef } from 'react';\n\nexport const random = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport const degToRad = (degrees) => Math.PI / 180 * degrees;\n\nexport const useStableCB = (callback, values) => {\n  const self = useRef({\n    values: values,\n    handler: (...args) => {\n      return callback(...args, self.current.values)\n    }\n  });\n  self.current.values = values\n  return self.current.handler\n}","import React, { useEffect, useContext, useState, useRef, useCallback } from 'react';\nimport * as d3 from 'd3-timer';\n\nimport { GameContext, PlayerContext } from './app';\nimport EnemyInfo from './enemy_info';\nimport PlayerInfo from './player_info';\nimport { degToRad, random, useStableCB } from '../utils';\n\n\nconst RADIUS = 5;\n\nconst Game = ({ screenHandle }) => {\n  const { state, dispatch } = useContext(GameContext);\n  const { playerState, playerDispatch } = useContext(PlayerContext);\n  const canvasRef = useRef(null);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  const cursorRef = useRef({ x: 100, y: 100 });\n  const targetsRef = useRef([]);\n  const stateRef = useRef(state);\n\n  useEffect(() => {\n    stateRef.current = state; \n  }, [state])\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setCanvas(canvas);\n    const ctx = canvasRef.current.getContext('2d');\n    setCtx(ctx);\n    const { innerWidth: width, innerHeight: height } = window;\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    canvas.requestPointerLock();\n    document.addEventListener('pointerlockchange', () => lockChangeAlert(canvas), false);\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.exitPointerLock();\n      screenHandle.exit();\n    };\n  }, [])\n\n  useEffect(() => {\n    let t;\n    if (canvas && ctx) {\n      t = d3.timer(tickAnimation)\n    }\n    return () => t && t.stop()\n  }, [canvas, ctx]);\n\n  const handleClick = () => {\n    const screenX = cursorRef.current.x;\n    const screenY = cursorRef.current.y;\n    const targets = targetsRef.current;\n    const newTargets = targets.filter(({ x, y, width, height }) =>\n      // Filter out if target clicked inside\n      !(screenX + RADIUS >= x && screenX - RADIUS <= x + width && screenY + RADIUS >= y && screenY - RADIUS <= y + height));\n    const { enemies, currentEnemyIdx } = stateRef.current;\n    const enemy = enemies[currentEnemyIdx];\n    if (newTargets.length === targets.length) {\n      // Player misses target\n      dispatch({ type: 'takeDamage' });\n    } else {\n      // Player hits target\n      targetsRef.current = newTargets;\n      dispatch({\n        type: 'damageEnemy',\n        payload: {\n          damage: playerState.damage,\n        }\n      });\n    }\n  }\n\n  const spawnTarget = (canvas) => {\n    if (!targetsRef.current.length && canvas) {\n      const WIDTH = 50;\n      const HEIGHT = 50;\n\n      const { width, height } = canvas;\n      const x = random(width / 2 - width / 4, width - WIDTH - width / 2);\n      const y = random(height / 2 - height / 4, height - HEIGHT - height / 2);\n      targetsRef.current = [{ x, y, width: WIDTH, height: HEIGHT }];\n    }\n  }\n\n  const drawTargets = (ctx) => {\n    targetsRef.current.forEach(({ x, y, width, height }) => {\n      ctx.fillStyle = \"yellow\";\n      ctx.fillRect(x, y, width, height);\n    });\n  };\n\n  const drawCanvas = (canvas, ctx) => {\n    ctx.fillStyle = 'grey';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawTargets(ctx);\n\n    // Cursor\n    ctx.fillStyle = \"#f00\";\n    ctx.beginPath();\n    ctx.arc(cursorRef.current.x, cursorRef.current.y, RADIUS, 0, degToRad(360), true);\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const tickAnimation = useStableCB((_, [canvas, ctx]) => {\n    if (!canvas || !ctx) return;\n\n    spawnTarget(canvas);\n    drawCanvas(canvas, ctx);\n  }, [canvas, ctx]);\n\n  const lockChangeAlert = (canvas) => {\n    if (document.pointerLockElement === canvas ||\n        document.mozPointerLockElement === canvas) {\n      canvas.addEventListener(\"mousemove\", m => mouseMoveMemo(m), false);\n    }\n  }\n\n  const mouseMoveMemo = useStableCB((e, [cursorRef, canvas]) => {\n    if (!canvas) return;\n    // Edge detection\n    const { x, y } = cursorRef.current;\n    if (x > canvas.width) {\n      cursorRef.current = { x: canvas.width - 1, y }\n      return\n    }\n    if (y > canvas.height) {\n      cursorRef.current = { x, y: canvas.height - 1 }\n      return\n    }  \n    if (x < 0) {\n      cursorRef.current = { x: 1, y }\n      return\n    }\n    if (y < 0) {\n      cursorRef.current = { x, y: 1 }\n      return\n    }\n    const dx = e.movementX * .4;\n    const dy = e.movementY * .4;\n    cursorRef.current = { x: x + dx, y: y + dy }\n  }, [cursorRef, canvas]);\n\n  return (\n    <>\n      <canvas ref={canvasRef}>\n      </canvas>\n      <EnemyInfo />\n      <PlayerInfo />\n    </>\n  );\n}\n\nexport default Game;\n","import { useReducer } from 'react';\n\nconst initialState = {\n  status: 'INITIAL',\n  player: {\n    hp: 100,\n    maxHP: 100,\n    damage: 10,\n    level: 1,\n    xp: 0,\n  },\n};\n\nexport const getXPToLevel = (lvl) => lvl * lvl * 10;\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'startGame':\n      return {\n        ...state,\n        status: 'RUNNING',\n        enemies: action.payload.enemies,\n        currentEnemyIdx: 0,\n      }\n    case 'nextEnemy':\n      return {\n        ...state,\n        currentEnemyIdx: state.currentEnemyIdx + 1,\n      }\n    case 'damageEnemy': {\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      const newEnemies = enemies.slice();\n      const newHP = Math.max(enemy.hp - 10, 0);\n      newEnemies[currentEnemyIdx] = {\n        ...enemy,\n        hp: newHP,\n      };\n\n      const newEnemyIdx = newHP ? currentEnemyIdx : currentEnemyIdx + 1;\n      let player = state.player;\n      if (!newHP) {\n        // Gain XP\n        let newXP = state.player.xp + enemy.xp;\n        let level = state.player.level;\n        const reqXP = getXPToLevel(level);\n        // Level if XP maxed\n        if (newXP >= reqXP) {\n          newXP = reqXP - newXP;\n          level++;\n        }\n        player = {\n          ...state.player,\n          xp: newXP,\n          level,\n        };\n      }\n      if (newEnemyIdx >= enemies.length) {\n        return {\n          status: 'COMPLETED',\n        }\n      }\n      return {\n        ...state,\n        player,\n        enemies: newEnemies,\n        currentEnemyIdx: newEnemyIdx,\n      }\n    }\n    case 'takeDamage': {\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          hp: state.player.hp - enemy.damage,\n        },\n      }\n    }\n    case 'endGame':\n      return {\n        ...state,\n        status: 'INITIAL',\n      }\n    default:\n      return state\n  }\n}\n\nexport const useGameReducer = () => useReducer(reducer, initialState);","import React from 'react';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\nimport styled from '@emotion/styled';\nimport DungeonList from './dungeon_list';\nimport Game from './game';\n\nimport { useGameReducer } from '../hooks/game';\nimport { usePlayerReducer } from '../hooks/player';\n\nconst Container = styled.div`\n`;\n\nexport const GameContext = React.createContext();\nexport const PlayerContext = React.createContext();\n\nconst App = () => {\n  const [state, dispatch] = useGameReducer();\n  const [playerState, playerDispatch] = usePlayerReducer();\n  const gameScreen = useFullScreenHandle();\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <PlayerContext.Provider value={{ playerState, playerDispatch }}>\n        <Container>\n          {state.status === 'INITIAL' && <DungeonList openGameScreen={gameScreen.enter} />}\n          <FullScreen handle={gameScreen}>\n            {state.status === 'RUNNING' && gameScreen.active && <Game screenHandle={gameScreen}/>}\n          </FullScreen>\n        </Container>\n      </PlayerContext.Provider>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}