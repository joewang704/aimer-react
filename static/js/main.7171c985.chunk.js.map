{"version":3,"sources":["components/dungeon_list.js","utils.js","components/game.js","components/app.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","DungeonList","openGameScreen","useContext","GameContext","dispatch","state","onClick","type","payload","enemies","name","hp","maxHP","dmg","xp","random","min","max","Math","ceil","floor","useStableCB","callback","values","self","useRef","handler","args","current","EnemyInfo","EnemyBar","Health","percent","width","Text","Game","screenHandle","canvasRef","useState","canvas","setCanvas","ctx","setCtx","cursorRef","x","y","targetsRef","stateRef","useEffect","getContext","window","innerWidth","height","innerHeight","requestPointerLock","document","addEventListener","lockChangeAlert","handleClick","exitPointerLock","exit","t","d3","tickAnimation","stop","screenX","screenY","targets","newTargets","filter","length","drawCanvas","degrees","fillStyle","fillRect","forEach","drawTargets","beginPath","arc","PI","fill","closePath","_","spawnTarget","pointerLockElement","mozPointerLockElement","m","mouseMoveMemo","e","dx","movementX","dy","movementY","enemy","currentEnemyIdx","ref","damage","React","createContext","initialState","status","reducer","action","console","log","newEnemies","slice","newHP","newEnemyIdx","App","useReducer","gameScreen","useFullScreenHandle","Provider","value","enter","handle","active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7171c985.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n`;\n\nconst DungeonList = ({ openGameScreen }) => {\n  const { state, dispatch } = useContext(GameContext);\n\n  return (\n    <Container>\n      <button onClick={() => {\n        dispatch({\n          type: 'startGame',\n          payload: {\n            enemies: [{\n              name: 'Slime',\n              hp: 100,\n              maxHP: 100,\n              dmg: 10,\n              xp: 50,\n            }]\n          },\n        });\n        openGameScreen();\n      }}>Dungeon 1</button>\n    </Container>\n  );\n}\n\nexport default DungeonList;\n","import React, { useRef } from 'react';\n\nexport const random = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport const degToRad = (degrees) => Math.PI / 180 * degrees;\n\nexport const useStableCB = (callback, values) => {\n  const self = useRef({\n    values: values,\n    handler: (...args) => {\n      return callback(...args, self.current.values)\n    }\n  });\n  self.current.values = values\n  return self.current.handler\n}","import React, { useEffect, useContext, useState, useRef, useCallback } from 'react';\nimport styled from '@emotion/styled';\nimport * as d3 from 'd3-timer';\n\nimport { GameContext } from './app';\nimport { degToRad, random, useStableCB } from '../utils';\n\nconst EnemyInfo = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst EnemyBar = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst RADIUS = 5;\n\nconst Game = ({ screenHandle }) => {\n  const { state, dispatch } = useContext(GameContext);\n  const canvasRef = useRef(null);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  const cursorRef = useRef({ x: 100, y: 100 });\n  const targetsRef = useRef([]);\n  const stateRef = useRef(state);\n\n  useEffect(() => {\n    stateRef.current = state; \n  }, [state])\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setCanvas(canvas);\n    const ctx = canvasRef.current.getContext('2d');\n    setCtx(ctx);\n    const { innerWidth: width, innerHeight: height } = window;\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    canvas.requestPointerLock();\n    document.addEventListener('pointerlockchange', () => lockChangeAlert(canvas), false);\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.exitPointerLock();\n      screenHandle.exit();\n    };\n  }, [])\n\n  useEffect(() => {\n    let t;\n    if (canvas && ctx) {\n      t = d3.timer(tickAnimation)\n    }\n    return () => t && t.stop()\n  }, [canvas, ctx]);\n\n  const handleClick = () => {\n    const screenX = cursorRef.current.x;\n    const screenY = cursorRef.current.y;\n    const targets = targetsRef.current;\n    const newTargets = targets.filter(({ x, y, width, height }) =>\n      // Filter out if target clicked inside\n      !(screenX + RADIUS >= x && screenX - RADIUS <= x + width && screenY + RADIUS >= y && screenY - RADIUS <= y + height));\n    if (newTargets.length === targets.length) {\n      // Player misses target\n      // Player.takeDamage(10);\n    } else {\n      // Player hits target\n      // Player.gainXP(10);\n      targetsRef.current = newTargets;\n      dispatch({\n        type: 'damageEnemy',\n      });\n    }\n  }\n\n  const spawnTarget = (canvas) => {\n    if (!targetsRef.current.length && canvas) {\n      const WIDTH = 50;\n      const HEIGHT = 50;\n\n      const { width, height } = canvas;\n      const x = random(width / 2 - width / 4, width - WIDTH - width / 2);\n      const y = random(height / 2 - height / 4, height - HEIGHT - height / 2);\n      targetsRef.current = [{ x, y, width: WIDTH, height: HEIGHT }];\n    }\n  }\n\n  const drawTargets = (ctx) => {\n    targetsRef.current.forEach(({ x, y, width, height }) => {\n      ctx.fillStyle = \"yellow\";\n      ctx.fillRect(x, y, width, height);\n    });\n  };\n\n  const drawCanvas = (canvas, ctx) => {\n    ctx.fillStyle = 'grey';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawTargets(ctx);\n\n    // Cursor\n    ctx.fillStyle = \"#f00\";\n    ctx.beginPath();\n    ctx.arc(cursorRef.current.x, cursorRef.current.y, RADIUS, 0, degToRad(360), true);\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const tickAnimation = useStableCB((_, [canvas, ctx]) => {\n    if (!canvas || !ctx) return;\n\n    spawnTarget(canvas);\n    drawCanvas(canvas, ctx);\n  }, [canvas, ctx]);\n\n  const lockChangeAlert = (canvas) => {\n    if (document.pointerLockElement === canvas ||\n        document.mozPointerLockElement === canvas) {\n      canvas.addEventListener(\"mousemove\", m => mouseMoveMemo(m), false);\n    }\n  }\n\n  const mouseMoveMemo = useStableCB((e, [cursorRef, canvas]) => {\n    if (!canvas) return;\n    // Edge detection\n    const { x, y } = cursorRef.current;\n    if (x > canvas.width) {\n      cursorRef.current = { x: canvas.width - 1, y }\n      return\n    }\n    if (y > canvas.height) {\n      cursorRef.current = { x, y: canvas.height - 1 }\n      return\n    }  \n    if (x < 0) {\n      cursorRef.current = { x: 1, y }\n      return\n    }\n    if (y < 0) {\n      cursorRef.current = { x, y: 1 }\n      return\n    }\n    const dx = e.movementX * .4;\n    const dy = e.movementY * .4;\n    cursorRef.current = { x: x + dx, y: y + dy }\n  }, [cursorRef, canvas]);\n\n  const { enemies, currentEnemyIdx } = state;\n  const enemy = enemies[currentEnemyIdx];\n\n  return (\n    <>\n      <canvas ref={canvasRef}>\n      </canvas>\n      {enemy && <EnemyInfo>\n        <h1>{enemy.name}, Damage: {enemy.damage}, XP Gained on Kill: {enemy.xp}</h1>\n        <EnemyBar>\n          <Text>{enemy.hp} / {enemy.maxHP}</Text>\n          <Health percent={enemy.hp / enemy.maxHP} />\n        </EnemyBar>\n      </EnemyInfo>}\n    </>\n  );\n}\n\nexport default Game;\n","import React, { useReducer } from 'react';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\nimport styled from '@emotion/styled';\nimport DungeonList from './dungeon_list';\nimport Game from './game';\n\nconst Container = styled.div`\n`;\n\nexport const GameContext = React.createContext();\n\nconst initialState = {\n  status: 'INITIAL',\n};\n\nconst reducer = (state, action) => {\n  console.log(state);\n  switch(action.type) {\n    case 'startGame':\n      return {\n        ...state,\n        status: 'RUNNING',\n        enemies: action.payload.enemies,\n        currentEnemyIdx: 0,\n      }\n    case 'nextEnemy':\n      return {\n        ...state,\n        currentEnemyIdx: state.currentEnemyIdx + 1,\n      }\n    case 'damageEnemy':\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      const newEnemies = enemies.slice();\n      const newHP = Math.max(enemy.hp - 10, 0);\n      console.log(newHP);\n      newEnemies[currentEnemyIdx] = {\n        ...enemy,\n        hp: newHP,\n      };\n\n      const newEnemyIdx = newHP ? currentEnemyIdx : currentEnemyIdx + 1;\n      if (newEnemyIdx >= enemies.length) {\n        return {\n          status: 'COMPLETED',\n        }\n      }\n      console.log(newEnemies);\n      return {\n        ...state,\n        enemies: newEnemies,\n        currentEnemyIdx: newEnemyIdx,\n      }\n    case 'endGame':\n      return {\n        ...state,\n        status: 'INITIAL',\n      }\n    default:\n      return state\n  }\n}\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const gameScreen = useFullScreenHandle();\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Container>\n        {state.status === 'INITIAL' && <DungeonList openGameScreen={gameScreen.enter} />}\n        <FullScreen handle={gameScreen}>\n          {state.status === 'RUNNING' && gameScreen.active && <Game screenHandle={gameScreen}/>}\n        </FullScreen>\n      </Container>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}