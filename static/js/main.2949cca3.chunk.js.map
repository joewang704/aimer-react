{"version":3,"sources":["components/dungeon_list.js","components/sensitivity_input.js","components/enemy_info.js","utils/localStorage.js","hooks/game.js","components/player_info.js","utils.js","components/game.js","components/app.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","DungeonContainer","SLIME_INFO","name","hp","maxHP","damage","xp","lvl","BOOGIE_INFO","DUNGEONS","enemies","timer","DungeonList","openGameScreen","dispatch","useContext","GameContext","map","dungeon","onClick","type","payload","SensitivityInput","state","sensitivity","step","value","onChange","event","target","EnemyBar","Health","percent","width","Math","floor","Text","EnemyInfo","enemy","currentEnemyIdx","INITIAL_PLAYER_STATS","level","initialState","status","player","playerJSON","localStorage","getItem","JSON","parse","fetchPlayer","getXPToLevel","getDmg","reducer","action","newEnemies","slice","newHP","max","newEnemyIdx","newXP","reqXP","length","HealthContainer","XPContainer","XPBar","PlayerInfo","maxXP","random","min","ceil","useStableCB","callback","values","self","useRef","handler","args","current","Game","screenHandle","canvasRef","useState","canvas","setCanvas","ctx","setCtx","cursorRef","x","y","targetsRef","stateRef","useEffect","getContext","window","innerWidth","height","innerHeight","requestPointerLock","document","addEventListener","lockChangeAlert","handleClick","exitPointerLock","exit","t","d3","tickAnimation","stop","screenX","screenY","targets","newTargets","filter","drawCanvas","degrees","fillStyle","fillRect","forEach","drawTargets","beginPath","arc","PI","fill","closePath","timeElapsed","spawnTarget","font","timerSec","toFixed","fillText","pointerLockElement","mozPointerLockElement","m","mouseMoveMemo","e","dx","movementX","dy","movementY","ref","React","createContext","App","useReducer","gameScreen","useFullScreenHandle","setItem","saveSensitivity","savePlayer","stringify","Provider","enter","handle","active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2949cca3.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst DungeonContainer = styled.div`\n  background-color: #eee;\n  margin: 24px;\n  padding: 24px;\n  padding-top: 8px;\n  border-radius: 4px;\n`;\n\nconst SLIME_INFO = {\n  name: 'Slime',\n  hp: 100,\n  maxHP: 100,\n  damage: 10,\n  xp: 5,\n  lvl: 1,\n};\n\nconst BOOGIE_INFO = {\n  name: 'Boogie',\n  hp: 400,\n  maxHP: 400,\n  damage: 40,\n  xp: 50,\n  lvl: 5,\n};\n\nconst SLIME_FARM = {\n  name: 'Slime Farm',\n  enemies: [\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n  ],\n  timer: 9999,\n  lvl: 1,\n};\n\nconst BOOGIE_FARM = {\n  name: 'Boogie Farm',\n  enemies: [\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n  ],\n  timer: 9999,\n  lvl: 5,\n};\n\nconst SLIME_DUNGEON = {\n  name: 'Slime Dungeon',\n  enemies: [\n    SLIME_INFO,\n    SLIME_INFO,\n    SLIME_INFO,\n    {\n      name: 'Slime Boss',\n      hp: 500,\n      maxHP: 500,\n      damage: 20,\n      xp: 10,\n      lvl: 1,\n    },\n  ],\n  timer: 60,\n  lvl: 1,\n};\n\nconst BOOGIE_DUNGEON = {\n  name: 'Boogie Dungeon',\n  enemies: [\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    BOOGIE_INFO,\n    {\n      name: 'Oogie Boss',\n      hp: 1500,\n      maxHP: 1500,\n      damage: 200,\n      xp: 50,\n      lvl: 5,\n    },\n  ],\n  timer: 60,\n  lvl: 5,\n};\n\nconst DUNGEONS = [\n  SLIME_FARM,\n  SLIME_DUNGEON,\n  BOOGIE_FARM,\n  BOOGIE_DUNGEON,\n]\n\nconst DungeonList = ({ openGameScreen }) => {\n  const { dispatch } = useContext(GameContext);\n\n  return (\n    <Container>\n      {DUNGEONS.map(dungeon => (\n        <DungeonContainer>\n          <h3>{dungeon.name}</h3>\n          <div>Level: {dungeon.lvl}</div>\n          <div>Items: TBD</div>\n          <button onClick={() => {\n            dispatch({\n              type: 'startGame',\n              payload: dungeon,\n            });\n            openGameScreen();\n          }}>Start</button>\n        </DungeonContainer>\n      ))}\n    </Container>\n  );\n}\n\nexport default DungeonList;\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst SensitivityInput = () => {\n  const { state, dispatch } = useContext(GameContext);\n\n  return (\n    <div>\n      <br />\n      <span>Current Sensitivity: {state.sensitivity}</span>\n      <br />\n      <br />\n      <input \n        type=\"number\"\n        step=\"0.01\"\n        value={state.sensitivity} onChange={(event) =>\n          dispatch({ type: 'setSensitivity', payload: { sensitivity: event.target.value } })\n        }\n      />\n    </div>\n  );\n};\nexport default SensitivityInput;\n","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst EnemyBar = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst EnemyInfo = () => {\n  const { state } = useContext(GameContext);\n\n  const { enemies, currentEnemyIdx } = state;\n  const enemy = enemies[currentEnemyIdx];\n\n  return (\n    <Container>\n      <h1>{enemy.name}, Damage: {enemy.damage}, XP Gained on Kill: {enemy.xp}</h1>\n      <EnemyBar>\n        <Text>{enemy.hp} / {enemy.maxHP}</Text>\n        <Health percent={enemy.hp / enemy.maxHP} />\n      </EnemyBar>\n    </Container>\n  );\n};\nexport default EnemyInfo;","const INITIAL_PLAYER_STATS = {\n  hp: 100,\n  maxHP: 100,\n  level: 1,\n  xp: 0,\n};\n\nconst INITIAL_SENSITIVITY = 0.4;\n\nexport const savePlayer = (player) => localStorage.setItem('player', player);\nexport const fetchPlayer = () => {\n  const playerJSON = localStorage.getItem('player');\n  if (playerJSON) {\n    const player = JSON.parse(playerJSON);\n    player.hp = player.maxHP;\n    return player;\n  }\n  return INITIAL_PLAYER_STATS;\n}\n\nexport const saveSensitivity = (sensitivity) => localStorage.setItem('sensitivity', sensitivity);\nexport const fetchSensitivity = () => localStorage.getItem('sensitivity') || INITIAL_SENSITIVITY;","import { useReducer } from 'react';\n\nimport { fetchPlayer, fetchSensitivity } from '../utils/localStorage';\n\nconst initialState = {\n  status: 'INITIAL',\n  player: fetchPlayer(),\n  sensitivity: fetchSensitivity(),\n};\n\nexport const getXPToLevel = (lvl) => lvl * lvl * 10;\nexport const getDmg = (lvl) => lvl * lvl + 10;\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'setSensitivity':\n      return {\n        ...state,\n        sensitivity: action.payload.sensitivity,\n      }\n    case 'startGame':\n      return {\n        ...state,\n        status: 'RUNNING',\n        enemies: action.payload.enemies,\n        timer: action.payload.timer,\n        currentEnemyIdx: 0,\n      }\n    case 'nextEnemy':\n      return {\n        ...state,\n        currentEnemyIdx: state.currentEnemyIdx + 1,\n      }\n    case 'damageEnemy': {\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      const newEnemies = enemies.slice();\n      const newHP = Math.max(enemy.hp - action.payload.damage, 0);\n      newEnemies[currentEnemyIdx] = {\n        ...enemy,\n        hp: newHP,\n      };\n\n      const newEnemyIdx = newHP ? currentEnemyIdx : currentEnemyIdx + 1;\n      let player = state.player;\n      if (!newHP) {\n        // Gain XP\n        let newXP = state.player.xp + enemy.xp;\n        let level = state.player.level;\n        const reqXP = getXPToLevel(level);\n        // Level if XP maxed\n        if (newXP >= reqXP) {\n          newXP = reqXP - newXP;\n          level++;\n        }\n        player = {\n          ...state.player,\n          xp: newXP,\n          level,\n        };\n      }\n      if (newEnemyIdx >= enemies.length) {\n        return {\n          status: 'COMPLETED',\n        }\n      }\n      return {\n        ...state,\n        player,\n        enemies: newEnemies,\n        currentEnemyIdx: newEnemyIdx,\n      }\n    }\n    case 'takeDamage': {\n      const { enemies, currentEnemyIdx } = state;\n      const enemy = enemies[currentEnemyIdx];\n      const newHP = Math.max(state.player.hp - enemy.damage, 0);\n      if (!newHP) {\n        return {\n          status: 'GAME_OVER',\n        };\n      }\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          hp: newHP,\n        },\n      }\n    }\n    case 'endGame':\n      return {\n        ...state,\n        status: 'INITIAL',\n      }\n    default:\n      return state\n  }\n}\n\nexport const useGameReducer = () => useReducer(reducer, initialState);","import React, { useContext } from 'react';\nimport styled from '@emotion/styled';\n\nimport { GameContext } from './app';\nimport { getXPToLevel, getDmg } from '../hooks/game';\n\nconst Container = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 150px;\n  background-color: white;\n  padding: 24px;\n  h1 {\n    font-size: 16px;\n  }\n`;\n\nconst HealthContainer = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  border: 1px solid #666;\n`;\n\nconst Health = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: red;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst Text = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\nconst XPContainer = styled.div`\n  position: relative;\n  width: calc(100% - 48px);\n  height: 30px;\n  text-align: center;\n  line-height: 30px;\n  border: 1px solid #666;\n`;\n\nconst XPBar = styled.div`\n  ${({ percent }) => ({\n    width: `${Math.floor(percent * 100)}%`,\n  })}\n  background-color: yellow;\n  position: absolute;\n  height: 100%;\n  top: 0;\n`;\n\nconst XPText = styled.div`\n  z-index: 2;\n  position: relative;\n`;\n\n\nconst PlayerInfo = () => {\n  // const { playerState: player } = useContext(PlayerContext);\n  const { state } = useContext(GameContext);\n  const { player } = state;\n  const maxXP = getXPToLevel(player.level);\n  const damage = getDmg(player.level);\n\n  return (\n    <Container>\n      <h1>Player, Level: {player.level}, Damage: {damage}</h1>\n      <HealthContainer>\n        <Text>{player.hp} / {player.maxHP}</Text>\n        <Health percent={player.hp / player.maxHP} />\n      </HealthContainer>\n      <XPContainer>\n        <Text>{player.xp} / {maxXP}</Text>\n        <XPBar percent={player.xp / maxXP} />\n      </XPContainer>\n    </Container>\n  );\n};\n\nexport default PlayerInfo;","import { useRef } from 'react';\n\nexport const random = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport const degToRad = (degrees) => Math.PI / 180 * degrees;\n\nexport const useStableCB = (callback, values) => {\n  const self = useRef({\n    values: values,\n    handler: (...args) => {\n      return callback(...args, self.current.values)\n    }\n  });\n  self.current.values = values\n  return self.current.handler\n}","import React, { useEffect, useContext, useState, useRef, useCallback } from 'react';\nimport * as d3 from 'd3-timer';\n\nimport { GameContext } from './app';\nimport EnemyInfo from './enemy_info';\nimport PlayerInfo from './player_info';\nimport { degToRad, random, useStableCB } from '../utils';\nimport { getDmg } from '../hooks/game';\n\nconst RADIUS = 5;\n\nconst Game = ({ screenHandle }) => {\n  const { state, dispatch } = useContext(GameContext);\n  const canvasRef = useRef(null);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  const cursorRef = useRef({ x: 100, y: 100 });\n  const targetsRef = useRef([]);\n  const stateRef = useRef(state);\n\n  useEffect(() => {\n    stateRef.current = state; \n  }, [state])\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setCanvas(canvas);\n    const ctx = canvasRef.current.getContext('2d');\n    setCtx(ctx);\n    const { innerWidth: width, innerHeight: height } = window;\n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    canvas.requestPointerLock();\n    document.addEventListener('pointerlockchange', () => lockChangeAlert(canvas), false);\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.exitPointerLock();\n      screenHandle.exit();\n    };\n  }, [])\n\n  useEffect(() => {\n    let t;\n    if (canvas && ctx) {\n      t = d3.timer(tickAnimation)\n    }\n    return () => t && t.stop()\n  }, [canvas, ctx]);\n\n  const handleClick = () => {\n    const screenX = cursorRef.current.x;\n    const screenY = cursorRef.current.y;\n    const targets = targetsRef.current;\n    const newTargets = targets.filter(({ x, y, width, height }) =>\n      // Filter out if target clicked inside\n      !(screenX + RADIUS >= x && screenX - RADIUS <= x + width && screenY + RADIUS >= y && screenY - RADIUS <= y + height));\n    const { enemies, currentEnemyIdx } = stateRef.current;\n    const enemy = enemies[currentEnemyIdx];\n    if (newTargets.length === targets.length) {\n      // Player misses target\n      dispatch({ type: 'takeDamage' });\n    } else {\n      // Player hits target\n      targetsRef.current = newTargets;\n      dispatch({\n        type: 'damageEnemy',\n        payload: {\n          damage: getDmg(state.player.level),\n        }\n      });\n    }\n  }\n\n  const spawnTarget = (canvas) => {\n    if (!targetsRef.current.length && canvas) {\n      const WIDTH = 50;\n      const HEIGHT = 50;\n\n      const { width, height } = canvas;\n      const x = random(width / 2 - width / 4, width - WIDTH - width / 2);\n      const y = random(height / 2 - height / 4, height - HEIGHT - height / 2);\n      targetsRef.current = [{ x, y, width: WIDTH, height: HEIGHT }];\n    }\n  }\n\n  const drawTargets = (ctx) => {\n    targetsRef.current.forEach(({ x, y, width, height }) => {\n      ctx.fillStyle = \"yellow\";\n      ctx.fillRect(x, y, width, height);\n    });\n  };\n\n  const drawCanvas = (canvas, ctx) => {\n    ctx.fillStyle = 'grey';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawTargets(ctx);\n\n    // Cursor\n    ctx.fillStyle = \"#f00\";\n    ctx.beginPath();\n    ctx.arc(cursorRef.current.x, cursorRef.current.y, RADIUS, 0, degToRad(360), true);\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const tickAnimation = useStableCB((timeElapsed, [canvas, ctx]) => {\n    if (!canvas || !ctx) return;\n\n    spawnTarget(canvas);\n    drawCanvas(canvas, ctx);\n    ctx.fillStyle = \"white\";\n    ctx.font = \"30px Helvetica\";\n    const timerSec = (state.timer - timeElapsed / 1000).toFixed(2);\n    if (timerSec <= 0) {\n      return dispatch({ type: 'endGame' });\n    }\n    ctx.fillText(timerSec, canvas.width / 2 - 30, 180);\n  }, [canvas, ctx]);\n\n  const lockChangeAlert = (canvas) => {\n    if (document.pointerLockElement === canvas ||\n        document.mozPointerLockElement === canvas) {\n      canvas.addEventListener(\"mousemove\", m => mouseMoveMemo(m), false);\n    }\n  }\n\n  const mouseMoveMemo = useStableCB((e, [cursorRef, canvas]) => {\n    if (!canvas) return;\n    // Edge detection\n    const { x, y } = cursorRef.current;\n    if (x > canvas.width) {\n      cursorRef.current = { x: canvas.width - 1, y }\n      return\n    }\n    if (y > canvas.height) {\n      cursorRef.current = { x, y: canvas.height - 1 }\n      return\n    }  \n    if (x < 0) {\n      cursorRef.current = { x: 1, y }\n      return\n    }\n    if (y < 0) {\n      cursorRef.current = { x, y: 1 }\n      return\n    }\n    const dx = e.movementX * (state.sensitivity || 1);\n    const dy = e.movementY * (state.sensitivity || 1);\n    cursorRef.current = { x: x + dx, y: y + dy }\n  }, [cursorRef, canvas]);\n\n  return (\n    <>\n      <canvas ref={canvasRef}>\n      </canvas>\n      <EnemyInfo />\n      <PlayerInfo />\n    </>\n  );\n}\n\nexport default Game;\n","import React, { useEffect } from 'react';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\nimport styled from '@emotion/styled';\n\nimport DungeonList from './dungeon_list';\nimport SensitivityInput from './sensitivity_input';\nimport Game from './game';\n\nimport { useGameReducer } from '../hooks/game';\nimport { savePlayer, saveSensitivity } from '../utils/localStorage';\n\nconst Container = styled.div`\n`;\n\nexport const GameContext = React.createContext();\n\nconst App = () => {\n  const [state, dispatch] = useGameReducer();\n  const gameScreen = useFullScreenHandle();\n\n  useEffect(() => {\n    const { sensitivity, player } = state;\n    if (sensitivity) {\n      saveSensitivity(sensitivity);\n    }\n    if (player) {\n      savePlayer(JSON.stringify(player));\n    }\n  }, [state.sensitivity, state.player]);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Container>\n        {state.status !== 'RUNNING' &&\n          <>\n            <DungeonList openGameScreen={gameScreen.enter} />\n            <SensitivityInput />\n          </>\n        }\n        <FullScreen handle={gameScreen}>\n          {state.status === 'RUNNING' && gameScreen.active && <Game screenHandle={gameScreen}/>}\n        </FullScreen>\n        {state.status === 'COMPLETED' && <>You're a beast lol</>}\n        {state.status === 'GAME_OVER' && <>You suck lol</>}\n      </Container>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}